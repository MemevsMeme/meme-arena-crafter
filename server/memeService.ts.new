import { storage } from "./storage";
import { GoogleGenerativeAI } from "@google/generative-ai";

class MemeService {
  private genAI: GoogleGenerativeAI | null = null;
  private placeholders = [
    "https://i.imgflip.com/65tesb.jpg",
    "https://i.imgflip.com/56q38k.jpg",
    "https://i.imgflip.com/4fh0ct.jpg",
    "https://i.imgflip.com/29v4rt.jpg",
    "https://i.imgflip.com/30b1gx.jpg",
    "https://i.imgflip.com/24y43o.jpg",
    "https://i.imgflip.com/1jwhww.jpg",
    "https://i.imgflip.com/2kbn1e.jpg"
  ];
  
  constructor() {
    if (process.env.GEMINI_API_KEY) {
      this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    }
  }
  
  /**
   * Generate AI text suggestions for a meme
   * @param prompt User prompt text for the meme
   * @returns AI-generated text suggestion
   */
  async generateAIText(prompt: string): Promise<string> {
    console.log("Generating AI text for prompt:", prompt);
    
    // Check if we can generate AI text
    if (!process.env.GEMINI_API_KEY || !this.genAI) {
      console.log("No Gemini API key available, cannot generate AI text");
      return "";
    }
    
    try {
      // Use Gemini Pro (text-only model) for generating meme text
      const model = this.genAI.getGenerativeModel({ model: "gemini-pro" });
      
      const memePrompt = `
      Create a funny meme based on this prompt: "${prompt}"
      
      Give me:
      1. A short top text (1-5 words)
      2. A punchy bottom text (1-7 words)
      
      Format your response as two lines of text only, separated by a newline.
      Don't add any explanations or formatting.
      `;
      
      const result = await model.generateContent(memePrompt);
      const response = await result.response;
      const aiText = response.text();
      
      console.log("AI text response:", aiText);
      return aiText;
    } catch (error) {
      console.error("Error generating AI text:", error);
      return "";
    }
  }
  
  /**
   * Get a random placeholder image for a meme
   * @returns URL to a random meme template
   */
  getRandomPlaceholderImage(): string {
    const randomIndex = Math.floor(Math.random() * this.placeholders.length);
    return this.placeholders[randomIndex];
  }
  
  /**
   * Seed demo memes for initial app state
   */
  async seedDemoMemes() {
    const demoMemes = [
      {
        promptText: "When the boss says we need to work this weekend",
        imageUrl: "https://i.imgflip.com/65tesb.jpg",
        userId: "1",
        views: 1200,
        likes: 342
      },
      {
        promptText: "When they ask if you know how to fix the printer",
        imageUrl: "https://i.imgflip.com/56q38k.jpg",
        userId: "1",
        views: 987,
        likes: 256
      },
      {
        promptText: "When someone actually uses your code in production",
        imageUrl: "https://i.imgflip.com/4fh0ct.jpg",
        userId: "1",
        views: 854,
        likes: 128
      },
      {
        promptText: "Me looking at new frameworks while my current project isn't finished",
        imageUrl: "https://i.imgflip.com/29v4rt.jpg",
        userId: "1",
        views: 562,
        likes: 98
      }
    ];
    
    // Check if we already have memes in the system
    const existingMemes = await storage.getAllMemes();
    if (existingMemes.length > 0) {
      return;
    }
    
    // Create the memes
    for (const meme of demoMemes) {
      // Create the meme
      const createdMeme = await storage.createMeme({
        promptText: meme.promptText,
        imageUrl: meme.imageUrl,
        userId: meme.userId
      });
      
      // Update views and likes
      await storage.updateMemeViews(createdMeme.id, meme.views);
      await storage.updateMemeLikes(createdMeme.id, meme.likes);
    }
    
    console.log("Demo memes seeded successfully");
  }
}

export const memeService = new MemeService();