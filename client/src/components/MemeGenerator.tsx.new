import { useState, useRef } from "react";
import { useToast } from "@/hooks/use-toast";
import { queryClient } from "@/lib/queryClient";
import MemeTemplate from "./MemeTemplate";
import MemeEditor from "./MemeEditor";
import { Template } from "@shared/schema";
import { Input } from "@/components/ui/input";

interface MemeGeneratorProps {
  templates: Template[];
}

type CreationMode = "ai" | "template" | "upload";

const MemeGenerator = ({ templates }: MemeGeneratorProps) => {
  const [prompt, setPrompt] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
  const [creationMode, setCreationMode] = useState<CreationMode>("ai");
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadPreview, setUploadPreview] = useState<string | null>(null);
  const [generatedImageUrl, setGeneratedImageUrl] = useState<string | null>(null);
  const [showEditor, setShowEditor] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const memeTemplates = templates.filter(t => t.type === "template");
  const reactionImages = templates.filter(t => t.type === "reaction");

  const handleGenerate = async () => {
    // Validation based on creation mode
    if (creationMode === "ai" && !prompt.trim()) {
      toast({
        title: "Empty prompt",
        description: "Please enter a meme description first.",
        variant: "destructive",
      });
      return;
    }

    if (creationMode === "template" && !selectedTemplate) {
      toast({
        title: "No template selected",
        description: "Please select a template first.",
        variant: "destructive",
      });
      return;
    }

    if (creationMode === "upload" && !selectedFile) {
      toast({
        title: "No image selected",
        description: "Please upload an image first.",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);
    
    // Handle upload mode separately
    if (creationMode === "upload" && uploadPreview) {
      setGeneratedImageUrl(uploadPreview);
      setShowEditor(true);
      setIsGenerating(false);
      return;
    }
    
    // Handle AI or template based generation
    try {
      const templateId = (creationMode === "template" && selectedTemplate) 
        ? selectedTemplate.id 
        : null;
      
      const response = await fetch("/api/memes/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          promptText: prompt,
          templateId,
          generationType: creationMode
        })
      });
      
      if (!response.ok) {
        throw new Error(`Failed to generate meme: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data && data.imageUrl) {
        setGeneratedImageUrl(data.imageUrl);
        setShowEditor(true);
      } else {
        throw new Error("No image URL received from server");
      }
    } catch (error) {
      console.error("Error generating meme:", error);
      toast({
        title: "Generation failed",
        description: "There was an error generating your meme. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSaveMeme = async (editedImageUrl: string) => {
    try {
      // Create the meme with the edited image
      const response = await fetch("/api/memes", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          promptText: prompt,
          imageUrl: editedImageUrl,
          templateId: selectedTemplate?.id || null,
        })
      });
      
      if (!response.ok) {
        throw new Error("Failed to save meme");
      }
      
      toast({
        title: "Meme created!",
        description: "Your meme has been created and added to the gallery.",
      });
      
      // Reset form
      setPrompt("");
      setSelectedTemplate(null);
      setSelectedFile(null);
      setUploadPreview(null);
      setGeneratedImageUrl(null);
      setShowEditor(false);
      
      // Refresh memes data
      queryClient.invalidateQueries({ queryKey: ["/api/memes"] });
      
    } catch (error) {
      toast({
        title: "Save failed",
        description: "There was an error saving your meme. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCancelEdit = () => {
    setShowEditor(false);
    setIsGenerating(false);
    setGeneratedImageUrl(null);
  };

  const handleTemplateSelect = (template: Template) => {
    setSelectedTemplate(template);
    setCreationMode("template");
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setSelectedFile(file);
      
      // Create preview URL
      const reader = new FileReader();
      reader.onload = (event) => {
        setUploadPreview(event.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const triggerFileInput = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className="bg-white p-6 rounded-xl shadow-lg mb-8">
      {showEditor && generatedImageUrl ? (
        <MemeEditor
          imageUrl={generatedImageUrl}
          onSave={handleSaveMeme}
          onCancel={handleCancelEdit}
        />
      ) : (
        <>
          <h3 className="text-xl font-heading font-bold mb-4">Create Your Own Meme</h3>
          
          {/* Creation Mode Tabs */}
          <div className="flex border-b mb-6">
            <button 
              className={`py-2 px-4 font-medium ${creationMode === 'ai' ? 'text-primary border-b-2 border-primary' : 'text-gray-500'}`}
              onClick={() => setCreationMode('ai')}
            >
              AI Generated
            </button>
            <button 
              className={`py-2 px-4 font-medium ${creationMode === 'template' ? 'text-primary border-b-2 border-primary' : 'text-gray-500'}`}
              onClick={() => setCreationMode('template')}
            >
              Use Template
            </button>
            <button 
              className={`py-2 px-4 font-medium ${creationMode === 'upload' ? 'text-primary border-b-2 border-primary' : 'text-gray-500'}`}
              onClick={() => setCreationMode('upload')}
            >
              Upload Image
            </button>
          </div>
          
          {/* AI Generation Mode */}
          {creationMode === 'ai' && (
            <div className="mb-6">
              <label className="block text-gray-700 mb-2 font-medium">Meme Prompt</label>
              <div className="flex">
                <Input
                  type="text"
                  className="flex-1 rounded-l-lg focus:ring-2 focus:ring-primary"
                  placeholder="Describe your meme idea..."
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                />
                <button
                  className="bg-primary text-white px-4 py-2 rounded-r-lg font-medium hover:bg-opacity-90 transition flex items-center"
                  onClick={handleGenerate}
                  disabled={isGenerating}
                >
                  {isGenerating ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Generating...
                    </>
                  ) : (
                    <>Generate</>
                  )}
                </button>
              </div>
              <p className="text-sm text-gray-500 mt-2">Powered by Gemini AI - Be creative with your prompts!</p>
            </div>
          )}
          
          {/* Template Mode */}
          {creationMode === 'template' && (
            <div className="mb-6">
              <div className="mb-4">
                <label className="block text-gray-700 mb-2 font-medium">Caption (optional)</label>
                <Input
                  type="text"
                  className="w-full"
                  placeholder="Add text for your meme..."
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                />
              </div>
              
              <label className="block text-gray-700 mb-2 font-medium">Select Template</label>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
                {memeTemplates.map((template) => (
                  <MemeTemplate
                    key={template.id}
                    template={template}
                    isSelected={selectedTemplate?.id === template.id}
                    onSelect={handleTemplateSelect}
                    label="Meme Template"
                  />
                ))}
                {reactionImages.map((template) => (
                  <MemeTemplate
                    key={template.id}
                    template={template}
                    isSelected={selectedTemplate?.id === template.id}
                    onSelect={handleTemplateSelect}
                    label="Reaction Image"
                  />
                ))}
              </div>
              
              <div className="flex justify-center mt-4">
                <button
                  className="bg-primary text-white px-6 py-3 rounded-lg font-medium hover:bg-opacity-90 transition"
                  onClick={handleGenerate}
                  disabled={isGenerating || !selectedTemplate}
                >
                  {isGenerating ? 'Creating...' : 'Customize Meme'}
                </button>
              </div>
            </div>
          )}
          
          {/* Upload Mode */}
          {creationMode === 'upload' && (
            <div className="mb-6">
              <div className="mb-4">
                <label className="block text-gray-700 mb-2 font-medium">Caption (optional)</label>
                <Input
                  type="text"
                  className="w-full"
                  placeholder="Add text for your meme..."
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                />
              </div>
              
              <label className="block text-gray-700 mb-2 font-medium">Upload Image</label>
              <input
                type="file"
                ref={fileInputRef}
                className="hidden"
                accept="image/*"
                onChange={handleFileChange}
              />
              
              {uploadPreview ? (
                <div className="mb-4 text-center">
                  <img 
                    src={uploadPreview} 
                    alt="Upload preview" 
                    className="max-h-60 max-w-full mx-auto rounded border p-1"
                  />
                  <button 
                    className="mt-2 text-primary underline"
                    onClick={triggerFileInput}
                  >
                    Change Image
                  </button>
                </div>
              ) : (
                <div 
                  className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:bg-gray-50 transition"
                  onClick={triggerFileInput}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-400 mx-auto mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <p className="text-sm font-medium">Click to upload an image</p>
                  <p className="text-xs text-gray-500 mt-1">PNG, JPG or GIF (max 5MB)</p>
                </div>
              )}
              
              <div className="flex justify-center mt-4">
                <button
                  className="bg-primary text-white px-6 py-3 rounded-lg font-medium hover:bg-opacity-90 transition"
                  onClick={handleGenerate}
                  disabled={isGenerating || !selectedFile}
                >
                  {isGenerating ? 'Processing...' : 'Customize Meme'}
                </button>
              </div>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default MemeGenerator;