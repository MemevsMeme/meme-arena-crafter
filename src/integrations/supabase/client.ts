
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ezunpjcxnrfnpcsibtyb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV6dW5wamN4bnJmbnBjc2lidHliIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY5MDMzNzMsImV4cCI6MjA2MjQ3OTM3M30.eMCv2hMmifpFuK3e7y_tS5X0B6LqIGBNlvef3z_nPQc";

// Create client with explicit auth configuration for consistent behavior
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage: typeof window !== 'undefined' ? localStorage : undefined,
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

// Log some debug information
console.info("âœ… Supabase client connected successfully");

// Helper to create the required storage buckets if they don't exist
export async function ensureStorageBuckets() {
  try {
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('Error listing buckets:', error);
      return false;
    }
    
    // Check if the memes bucket exists
    const memesExists = buckets?.some(b => b.name === 'memes');
    
    if (!memesExists) {
      console.log('Creating memes bucket...');
      const { error: createError } = await supabase.storage.createBucket('memes', { 
        public: true,
        fileSizeLimit: 5242880 // 5MB
      });
      
      if (createError) {
        console.error('Error creating memes bucket:', createError);
        return false;
      }
      
      console.log('Memes bucket created successfully');
    } else {
      console.log('Memes bucket already exists');
    }
    
    return true;
  } catch (error) {
    console.error('Error ensuring storage buckets:', error);
    return false;
  }
}

// Call this function when the app starts
if (typeof window !== 'undefined') {
  ensureStorageBuckets().then(success => {
    if (success) {
      console.log('Storage buckets are ready');
    } else {
      console.warn('Failed to ensure storage buckets are set up');
    }
  });
}
